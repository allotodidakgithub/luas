#!/bin/sh
# Lua environment manager 0.2
# Published under MIT license. Daniel Lima, 2016 <danielm@tinyhub.tk>

LUAENV_CACHE="$HOME/.cache/luaenv"
LUAENV_UPDATE="$LUAENV_CACHE/update"
LUAENV_VERSIONS="$LUAENV_CACHE/versions"
LUAENV_LUAROCKS="$LUAENV_CACHE/luarocks_version"
MAKE="make -j$(nproc)"
mkdir -p "$LUAENV_CACHE"
if [ -d ".luaenv" ]; then
	LUAENV_DIR="$(pwd)/.luaenv"
else
	LUAENV_DIR="$HOME/.luaenv"
fi
if [ ! -d "$LUAENV_DIR" ]; then
	mkdir -p "$LUAENV_DIR"
fi

help() {
	echo "luaenv 0.2	Lua environment manager"
	echo ""
	echo "Usage:"
	echo "  luaenv list			list versions"
	echo "  luaenv update			update version list"
	echo "  luaenv init <version>		create .luaenv in current dir and install <version>"
	echo "  luaenv install <version>	install lua <version> and latest luarocks"
	echo "  luaenv remove <version>	remove lua <version> and its luarocks tree"
	echo "  luaenv use <version>		setup environment to use <version>"
	echo "  luaenv help			print this message"
	echo ""
}

use() {
	luarocks="$LUAENV_DIR/$1/bin/luarocks"
	if [ ! -x "$luarocks" ]; then
		echo "$1 is not installed." 1>&2
		exit 1
	fi
	if [ ! "$LUAENV_PATH" ]; then
		export LUAENV_PATH="$PATH"
	fi
	export PATH="$($luarocks path --lr-bin):$LUAENV_PATH"
	export LUA_PATH="./?.lua;./?/init.lua;$($luarocks path --lr-path)"
	export LUA_CPATH="./?.so;$($luarocks path --lr-cpath)"
	exec "$SHELL"
}

list() {
	if [ ! -f "$LUAENV_VERSIONS" ]; then
		echo "Could not connect to network, please try again later." 1>&2
		exit 1
	fi
	echo "Legend:"
	echo "   available"
	echo " - installed"
	echo " * active"
	echo ""
	echo "Versions:"
	cut -f1 "$LUAENV_VERSIONS" | \
		while read -r ver; do
			if $(echo "$LUA_PATH" | fgrep -q "$ver"); then
				echo " * $ver"
			elif [ -d "$LUAENV_DIR/$ver" ]; then
				echo " - $ver"
			else
				echo "   $ver"
			fi
		done
	echo ""
}

update() {
	printf "Updating package list... "
	if ! curl -# -o "$LUAENV_UPDATE" "https://github.com/limadm/luaenv/raw/master/update"; then
		echo "Could not connect to network, please try again later." 1>&2
		exit 1
	fi
	head -n-1 "$LUAENV_UPDATE" >"$LUAENV_VERSIONS"
	tail -n1  "$LUAENV_UPDATE" >"$LUAENV_LUAROCKS"
	echo "Done."
}

getpkg() {
	info="$(grep "$1" "$3")"
	url="$(echo "$info" | cut -f2)"
	md5="$(echo "$info" | cut -f3)"
	name="$(basename "$url" .tar.gz)"
	file="$LUAENV_CACHE/$name.tar.gz"
	md5s="$(md5sum "$file" | cut -c1-32)"
	if [ "$md5" != "$md5s" ]; then
		if ! curl -# -L -o "$file" "$url"; then
			echo "Could not download package file, please try again later." 1>&2
			exit 1
		fi
	fi
	tar -xzf "$file" -C "$2"
	echo $name
}

platform() {
	# TODO support for more platforms
	p="$(uname | sed 's/./\l\0/g')"
	case "$p" in
	(darwin) echo macosx ;;
	(*)      echo $p     ;;
	esac
}

install() {
	if [ ! -f "$LUAENV_VERSIONS" ]; then
		echo "An update is needed, please try again later." 1>&2
		exit 1
	fi

	echo "Installing $1..."
	install_dir="$LUAENV_DIR/$1"
	mkdir -p "$install_dir"
	tmp_dir="$(mktemp -d)"

	lua_pkg="$(getpkg "$1" "$tmp_dir" "$LUAENV_VERSIONS")"
	lua_dir="$tmp_dir/$lua_pkg"
	if echo "$1" | fgrep -q luajit; then
		$MAKE -C "$lua_dir" && $MAKE -C "$lua_dir" install PREFIX="$install_dir"
		ln -sf "$1" "$install_dir/bin/luajit"
	else
		sed -i "s;INSTALL_TOP= /usr/local;INSTALL_TOP= $install_dir;" "$lua_dir/Makefile"
		if !( $MAKE -C "$lua_dir" $(platform) && $MAKE -C "$lua_dir" install ); then
			echo "Could not build lua, please verify if build dependencies are installed in your system." 1>&2
			exit 1
		fi
	fi

	rocks_ver="$(cut -f1 "$LUAENV_LUAROCKS")"
	rocks_pkg="$(getpkg "$rocks_ver" "$tmp_dir" "$LUAENV_LUAROCKS")"
	rocks_dir="$tmp_dir/$rocks_pkg"
	export PATH="$install_dir/bin:$PATH"
	cd "$rocks_dir"
	"$rocks_dir/configure" --prefix="$install_dir"
	if !( $MAKE -C "$rocks_dir" build && $MAKE -C "$rocks_dir" install ); then
		echo "Could not build luarocks, please verify if build dependencies are installed in your system." 1>&2
		exit 1
	fi
	rm -rf "$tmp_dir"
	echo ""
	echo "Done."
}

remove() {
	install_dir="$LUAENV_DIR/$1"
	if [ ! -d "$install_dir" ]; then
		echo "This version is not installed." 1>&2
		exit 1
	fi
	echo "Removing $install_dir..."
	rm -rf $install_dir
	export PATH="$LUAENV_PATH"
	export LUA_PATH=
	export LUA_CPATH=
	echo "Done."
}

if [ ! -f "$LUAENV_VERSIONS" ]; then
	update
fi

case "$1" in
(install)  install  $2 ;;
(remove)   remove   $2 ;;
(use)      use      $2 ;;
(update)   update      ;;
(list)     list        ;;
(*)        help        ;;
esac
