#!/bin/sh
# Lua environment manager 0.7
# Published under MIT license. Daniel Lima, 2016 <danielm@nanohub.tk>

LUAS_CACHE="$HOME/.cache/luas"
LUAS_INDEX="$LUAS_CACHE/index"
LUAS_INDEX_URL="https://raw.githubusercontent.com/limadm/luas/master/index"
MAKE="make -j$(nproc)"
mkdir -p "$LUAS_CACHE"
if [ -d ".luas" ]; then
	LUAS_DIR="$(pwd)/.luas"
else
	LUAS_DIR="$LUAS_CACHE"
fi
if [ ! -d "$LUAS_DIR" ]; then
	mkdir -p "$LUAS_DIR"
fi

help() {
	echo "luas 0.7	Lua environment manager"
	echo ""
	echo "Usage:"
	echo "  luas list                 list available, installed (-) and active (*) versions"
	echo "  luas update               update package list"
	echo "  luas init    <version>    create .luas in current dir and install version"
	echo "  luas install <version>    install lua version and latest luarocks"
	echo "  luas remove  <version>    remove lua version and its luarocks tree"
	echo "  luas use     <version>    setup environment to use version"
	echo "  luas help                 print this message"
	echo ""
}

use() {
	luarocks="$LUAS_DIR/$1/bin/luarocks"
	if [ ! -x "$luarocks" ]; then
		echo "$1 is not installed." 1>&2
		exit 1
	fi
	echo "Using $LUAS_DIR/$1"
	if [ ! "$LUAS_PATH" ]; then
		export LUAS_PATH="$PATH"
	fi
	export PATH="$($luarocks path --lr-bin):$LUAS_PATH"
	export LUA_PATH="./?.lua;./?/init.lua;$($luarocks path --lr-path)"
	export LUA_CPATH="./?.so;$($luarocks path --lr-cpath)"
	exec "$SHELL"
}

fail_download() {
	echo "Could not download $1, please try again later." 1>&2
	exit 1
}

fail_build() {
	echo "Could not build $1, please verify if build dependencies are installed in your system." 1>&2
	exit 1
}

list() {
	[ -f "$LUAS_INDEX" ] || fail_download 'update'
	echo "Versions for $LUAS_DIR:"
	grep "^lua[^r]" "$LUAS_INDEX" | cut -f1 | \
		while read -r ver; do
			if $(echo "$LUA_PATH" | fgrep -q "$ver"); then
				echo " * $ver"
			elif [ -d "$LUAS_DIR/$ver" ]; then
				echo " - $ver"
			else
				echo "   $ver"
			fi
		done
	echo ""
}

update() {
	echo "Updating package list... "
	(curl -# -o "$LUAS_INDEX" "$LUAS_INDEX_URL") || fail_download 'update'
	echo "Done."
}

checksum() {
	[ "$(md5sum "$1" | cut -c1-32)" = "$2" ]
}

getpkg() {
	info="$(fgrep "$1" "$LUAS_INDEX")"
	url="$(echo "$info" | cut -f2)"
	md5="$(echo "$info" | cut -f3)"
	name="$(basename "$url" .tar.gz)"
	file="$LUAS_CACHE/$name.tar.gz"
	if ! checksum "$file" "$md5"; then
		(curl -# -L -o "$file" "$url") && (checksum "$file" "$md5") || fail_download 'package file'
	fi
	tar -xzf "$file" -C "$2"
	echo $name
}

platform() {
	# TODO support for more platforms
	p="$(uname | sed 's/./\l\0/g')"
	case "$p" in
	(darwin) echo macosx ;;
	(*)      echo $p     ;;
	esac
}

install() {
	[ -f "$LUAS_INDEX" ] || fail_download 'update'

	echo "Installing $1..."
	install_dir="$LUAS_DIR/$1"
	mkdir -p "$install_dir"
	tmp_dir="$(mktemp -d)"

	lua_pkg="$(getpkg "$1" "$tmp_dir")"
	lua_dir="$tmp_dir/$lua_pkg"
	if echo "$1" | fgrep -q luajit; then
		($MAKE -C "$lua_dir" && $MAKE -C "$lua_dir" install PREFIX="$install_dir") || fail_build 'luajit'
		ln -sf "$1" "$install_dir/bin/luajit"
		ln -sf "$install_dir/share/$1/jit" "$install_dir/share/lua/5.1/jit"
	else
		sed -i "s;INSTALL_TOP= /usr/local;INSTALL_TOP= $install_dir;" "$lua_dir/Makefile"
		($MAKE -C "$lua_dir" $(platform) && $MAKE -C "$lua_dir" install) || fail_build 'lua'
	fi

	rocks_ver="$(grep "^luarocks" "$LUAS_INDEX" | cut -f1)"
	rocks_pkg="$(getpkg "$rocks_ver" "$tmp_dir")"
	rocks_dir="$tmp_dir/$rocks_pkg"
	export PATH="$install_dir/bin:$PATH"
	cd "$rocks_dir"
	if echo "$1" | fgrep -q luajit; then
		"$rocks_dir/configure" --lua-suffix=jit --with-lua-include="$install_dir/include/$(echo $1 | cut -c1-10)" --prefix="$install_dir"
	else
		"$rocks_dir/configure" --prefix="$install_dir" --with-lua="$install_dir"
	fi
	($MAKE -C "$rocks_dir" build && $MAKE -C "$rocks_dir" install) || fail_build 'luarocks'
	rm -rf "$tmp_dir"
	echo ""
	echo "Done."
}

remove() {
	install_dir="$LUAS_DIR/$1"
	if [ ! -d "$install_dir" ]; then
		echo "This version is not installed." 1>&2
		exit 1
	fi
	echo "Removing $install_dir..."
	rm -rf $install_dir
	export PATH="$LUAS_PATH"
	export LUA_PATH=
	export LUA_CPATH=
	echo "Done."
}

init() {
	mkdir -p .luas
	luas install $1
	luas use $1
}

if [ ! -f "$LUAS_INDEX" ]; then
	update
fi

case "$1" in
(install)  install  $2 ;;
(remove)   remove   $2 ;;
(init)     init     $2 ;;
(use)      use      $2 ;;
(update)   update      ;;
(list)     list        ;;
(*)        help        ;;
esac
